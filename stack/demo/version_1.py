# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_demo_model.ipynb (unless otherwise specified).

__all__ = ['load_if_present', 'dump_if_path', 'get_scaler', 'generate_data', 'split_data', 'train_model', 'predict']

# Cell
from ..imports import *

# Cell

def load_if_present(path, mode='rb'):
    if path is None: return None
    if not Path.exists(path): return None
    return load(open(path, mode))

def dump_if_path(o, path=None, mode='wb'):
    if path is not None: dump(o, open(path, mode))
    return o

def get_scaler(X=None, fn=StandardScaler, path=None):
    scaler = load_if_present(path)
    if not X is None:
        scaler = fn()
        scaler.fit(X)
    if not path is None: dump(scaler, open(path, 'wb'))
    return scaler

def generate_data(path=None):
    X, y = make_classification(n_features=2, n_redundant=0, n_informative=2,
                               random_state=1, n_clusters_per_class=1)
    rng = np.random.RandomState(2)
    X += 2 * rng.uniform(size=X.shape)
    ds = make_circles(noise=0.2, factor=0.5, random_state=1)
    X, y = ds

    scaler = get_scaler(X=X, path=path)
    X = scaler.transform(X)

    return X, y, scaler

def split_data(X, y, test_size=.4, **kwargs):
    return train_test_split(X, y, test_size=test_size, **kwargs)

def train_model(X_train, y_train, path=None):
    clf = load_if_present(path)
    if clf is None:
        clf = SVC(gamma=2, C=1, probability=True)
        clf.fit(X_train, y_train)
        dump_if_path(clf, path=path)
    return clf

def predict(params):
    root = Path('stack/tmp')
    scaler_path = root/'scaler.pkl'
    clf_path = root/'clf.pkl'
    clf = load_if_present(clf_path)
    scaler = load_if_present(scaler_path)
    params = np.asarray(params).reshape(1, -1)
    X = scaler.transform(params)
    choice = int(clf.predict(X)[0])
    probabilities = clf.predict_proba(X)[0].tolist()
    return choice, probabilities